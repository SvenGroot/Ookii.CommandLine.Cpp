// This file contains the arguments used by this sample. It's passed to the New-Parser.ps1 script
// as part of the build in CMakeLists.txt, which looks for the attributes in square brackets, and
// generates an implementation of the parse() method that builds a parser and parses the arguments.
// The generated source file is then included in the compilation.
//
// See https://github.com/SvenGroot/Ookii.CommandLine.cpp/blob/main/docs/Scripts.md for information
// on how to use these scripts and attributes are available.
//
// The arguments and behavior is identical to the parser sample, so see that sample for more
// information. The comments here focus only on the code generation aspect.
#ifndef ARGUMENTS_H_
#define ARGUMENTS_H_

#pragma once

#include <ookii/command_line_generated.h>

// This struct defines the sample's command line arguments. The [arguments] attribute is mandatory
// and indicates that the struct contains command line arguments.
//
// The [version_info] attribute is used to create a "-Version" argument that will print the
// specified string. You can show multiple lines by repeating this attribute. On Windows, you can
// also use [win32_version] to display version information from the VERSIONINFO resource. If you
// use both [win32_version] and [version_info], the latter will be used on non-Windows platforms
// only.
//
// The [name_transform] argument indicates how argument names are determined from field names. In
// this case, all field names will be transformed to PascalCase. Other possible values are CamelCase
// (camelCase), SnakeCase (snake_case), DashCase (dash-case), Trim (just removes leading and
// trailing underscores), and None (use the field name as-is). Try changing it and rebuilding to
// see the results.
//
// The [show_usage_on_error] attribute sets the behavior when an error occurs.
//
// The remaining lines of the comment, under the final attribute, provide the description for the
// application used in the generated usage help.
// 
// [arguments]
// [name_transform: PascalCase]
// [version_info: Ookii.CommandLine Sample 2.0]
// [show_usage_on_error: syntax_only]
// Sample command line application. The application parses the command line and prints the results,
// but otherwise does nothing and none of the arguments are actually used for anything.
struct arguments
{
    // An argument is defined by a field preceded with attributes. The [argument] attribute must
    // be the first attribute to indicate the field is an argument. The argument is also marked
    // as required and positional with the appropriate attributes. Attributes can be combined on a
    // single line using commas, as long as they don't have a value.
    // 
    // The argument's name is "-Source", because of the PascalCase name transformation set above.
    // 
    // The description of the argument is taken from the rest of the comment under the attributes.
    // 
    // [argument, required, positional]
    // The source data.
    std::string source;

    // [argument, required, positional]
    // The destination data.
    std::string destination;

    // The name of this field will be transformed to "-OperationIndex" for the argument using the
    // PascalCase transformation. The default value for the argument is specified using the
    // [default] attribute. The default value is inserted into the generated source verbatim, so it
    // must be a valid C++ expression. If it's a string, it must have quotes! This is unlike most
    // other attribute values.
    // 
    // [argument, positional]
    // [default: 1]
    // The operation's index.
    int operation_index;

    // Here, the [value_description] attribute is used to set a custom value description.
    // 
    // [argument]
    // [value_description: number]
    // Provides the count for something to the application.
    std::optional<float> count;

    // The [alias] attribute sets one or more aliases, using a comma-separated list.
    // 
    // [argument]
    // [alias: v]
    // Print verbose information; this is an example of a switch argument.
    bool verbose;

    // This argument sets an explicit name using the value of the [argument] attribute. Explicit
    // names are not subject to the name transformation, so you must manually capitalize it
    // correctly.
    //
    // Multi-value arguments must be explicitly marked with the [multi_value] attribute.
    // 
    // [argument: Value]
    // [multi_value]
    // This is an example of a multi-value argument, which can be repeated multiple times to set
    // more than one value.
    std::vector<std::string> values;

    // Structs used with the New-Parser.ps1 script must have a parse() method, whose implementation
    // will be generated by the script. Use the OOKII_GENERATED_METHODS macro as an easy way to
    // declare the method with the correct signature. Call this method to parse the arguments
    // defined in the struct.
    //
    // This macro is defined in <ookii/command_line_generated.h>, which must be included manually.
    OOKII_GENERATED_METHODS(arguments);
};

// In CMakeLists.txt, the argument "-EntryPoint ookii_main" is passed to the New-Parser.ps1 script.
// This means that the script will generate a main() method for us, which will parse the arguments,
// and, if successful, invoke the specified function. The generated source file must have access to
// the declaration of that function, so it's declared here.
int ookii_main(arguments args);

#endif
